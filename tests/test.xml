<class>
 <keyword>class</keyword>
 <identifier>SquareGame</identifier>
 <symbol>{</symbol>
 <ClassVarDec>
  <keyword>field</keyword>
  <identifier>Square</identifier>
  <identifier>square</identifier>
  <symbol>;</symbol>
 </ClassVarDec>
 <ClassVarDec>
  <keyword>field</keyword>
  <keyword>int</keyword>
  <identifier>direction</identifier>
  <symbol>;</symbol>
 </ClassVarDec>
 <SubroutineDec>
  <keyword>constructor</keyword>
  <identifier>SquareGame</identifier>
  <identifier>new</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <SubroutineBody>
   <Statements>
    <let>
     <keyword>let</keyword>
     <identifier>square</identifier>
     <symbol>=</symbol>
     <Expression>
      <identifier>square</identifier>
     </Expression>
     <symbol>;</symbol>
    </let>
    <let>
     <keyword>let</keyword>
     <identifier>direction</identifier>
     <symbol>=</symbol>
     <Expression>
      <identifier>direction</identifier>
     </Expression>
     <symbol>;</symbol>
    </let>
    <return>
     <keyword>return</keyword>
     <Expression>
      <identifier>square</identifier>
     </Expression>
     <symbol>;</symbol>
    </return>
   </Statements>
  </SubroutineBody>
  <symbol>}</symbol>
 </SubroutineDec>
 <SubroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>dispose</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <SubroutineBody>
   <Statements>
    <do>
     <keyword>do</keyword>
     <identifier>square</identifier>
     <symbol>.</symbol>
     <identifier>dispose</identifier>
     <symbol>(</symbol>
     <symbol>)</symbol>
     <symbol>;</symbol>
    </do>
    <do>
     <keyword>do</keyword>
     <identifier>Memory</identifier>
     <symbol>.</symbol>
     <identifier>deAlloc</identifier>
     <symbol>(</symbol>
     <Expression>
      <identifier>square</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>;</symbol>
    </do>
    <return>
     <keyword>return</keyword>
     <symbol>;</symbol>
    </return>
   </Statements>
  </SubroutineBody>
  <symbol>}</symbol>
 </SubroutineDec>
 <SubroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>moveSquare</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <SubroutineBody>
   <Statements>
    <if>
     <keyword>if</keyword>
     <symbol>(</symbol>
     <Expression>
      <identifier>direction</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>{</symbol>
     <Statements>
      <do>
       <keyword>do</keyword>
       <identifier>square</identifier>
       <symbol>.</symbol>
       <identifier>moveUp</identifier>
       <symbol>(</symbol>
       <symbol>)</symbol>
       <symbol>;</symbol>
      </do>
     </Statements>
     <symbol>}</symbol>
    </if>
    <if>
     <keyword>if</keyword>
     <symbol>(</symbol>
     <Expression>
      <identifier>direction</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>{</symbol>
     <Statements>
      <do>
       <keyword>do</keyword>
       <identifier>square</identifier>
       <symbol>.</symbol>
       <identifier>moveDown</identifier>
       <symbol>(</symbol>
       <symbol>)</symbol>
       <symbol>;</symbol>
      </do>
     </Statements>
     <symbol>}</symbol>
    </if>
    <if>
     <keyword>if</keyword>
     <symbol>(</symbol>
     <Expression>
      <identifier>direction</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>{</symbol>
     <Statements>
      <do>
       <keyword>do</keyword>
       <identifier>square</identifier>
       <symbol>.</symbol>
       <identifier>moveLeft</identifier>
       <symbol>(</symbol>
       <symbol>)</symbol>
       <symbol>;</symbol>
      </do>
     </Statements>
     <symbol>}</symbol>
    </if>
    <if>
     <keyword>if</keyword>
     <symbol>(</symbol>
     <Expression>
      <identifier>direction</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>{</symbol>
     <Statements>
      <do>
       <keyword>do</keyword>
       <identifier>square</identifier>
       <symbol>.</symbol>
       <identifier>moveRight</identifier>
       <symbol>(</symbol>
       <symbol>)</symbol>
       <symbol>;</symbol>
      </do>
     </Statements>
     <symbol>}</symbol>
    </if>
    <do>
     <keyword>do</keyword>
     <identifier>Sys</identifier>
     <symbol>.</symbol>
     <identifier>wait</identifier>
     <symbol>(</symbol>
     <Expression>
      <identifier>direction</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>;</symbol>
    </do>
    <return>
     <keyword>return</keyword>
     <symbol>;</symbol>
    </return>
   </Statements>
  </SubroutineBody>
  <symbol>}</symbol>
 </SubroutineDec>
 <SubroutineDec>
  <keyword>method</keyword>
  <keyword>void</keyword>
  <identifier>run</identifier>
  <symbol>(</symbol>
  <symbol>)</symbol>
  <symbol>{</symbol>
  <SubroutineBody>
   <VarDec>
    <keyword>var</keyword>
    <keyword>char</keyword>
    <identifier>key</identifier>
    <symbol>;</symbol>
   </VarDec>
   <VarDec>
    <keyword>var</keyword>
    <identifier>boolean</identifier>
    <identifier>exit</identifier>
    <symbol>;</symbol>
   </VarDec>
   <Statements>
    <let>
     <keyword>let</keyword>
     <identifier>exit</identifier>
     <symbol>=</symbol>
     <Expression>
      <identifier>key</identifier>
     </Expression>
     <symbol>;</symbol>
    </let>
    <while>
     <keyword>while</keyword>
     <symbol>(</symbol>
     <Expression>
      <identifier>exit</identifier>
     </Expression>
     <symbol>)</symbol>
     <symbol>{</symbol>
     <Statements>
      <while>
       <keyword>while</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>key</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>key</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
        <do>
         <keyword>do</keyword>
         <identifier>moveSquare</identifier>
         <symbol>(</symbol>
         <symbol>)</symbol>
         <symbol>;</symbol>
        </do>
       </Statements>
       <symbol>}</symbol>
      </while>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>exit</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>exit</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
       </Statements>
       <symbol>}</symbol>
      </if>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <do>
         <keyword>do</keyword>
         <identifier>square</identifier>
         <symbol>.</symbol>
         <identifier>decSize</identifier>
         <symbol>(</symbol>
         <symbol>)</symbol>
         <symbol>;</symbol>
        </do>
       </Statements>
       <symbol>}</symbol>
      </if>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <do>
         <keyword>do</keyword>
         <identifier>square</identifier>
         <symbol>.</symbol>
         <identifier>incSize</identifier>
         <symbol>(</symbol>
         <symbol>)</symbol>
         <symbol>;</symbol>
        </do>
       </Statements>
       <symbol>}</symbol>
      </if>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>direction</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>exit</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
       </Statements>
       <symbol>}</symbol>
      </if>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>direction</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>key</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
       </Statements>
       <symbol>}</symbol>
      </if>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>direction</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>square</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
       </Statements>
       <symbol>}</symbol>
      </if>
      <if>
       <keyword>if</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>direction</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>direction</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
       </Statements>
       <symbol>}</symbol>
      </if>
      <while>
       <keyword>while</keyword>
       <symbol>(</symbol>
       <Expression>
        <identifier>key</identifier>
       </Expression>
       <symbol>)</symbol>
       <symbol>{</symbol>
       <Statements>
        <let>
         <keyword>let</keyword>
         <identifier>key</identifier>
         <symbol>=</symbol>
         <Expression>
          <identifier>key</identifier>
         </Expression>
         <symbol>;</symbol>
        </let>
        <do>
         <keyword>do</keyword>
         <identifier>moveSquare</identifier>
         <symbol>(</symbol>
         <symbol>)</symbol>
         <symbol>;</symbol>
        </do>
       </Statements>
       <symbol>}</symbol>
      </while>
     </Statements>
     <symbol>}</symbol>
    </while>
    <return>
     <keyword>return</keyword>
     <symbol>;</symbol>
    </return>
   </Statements>
  </SubroutineBody>
  <symbol>}</symbol>
 </SubroutineDec>
</class>
