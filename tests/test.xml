<class>
 <keyword> class </keyword>
 <identifier> Main </identifier>
 <symbol> { </symbol>
 <SubroutineDec>
  <keyword> function </keyword>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <ParameterLilst>
  </ParameterLilst>
  <symbol> ) </symbol>
  <SubroutineBody>
   <symbol> { </symbol>
   <VarDec>
    <keyword> var </keyword>
    <identifier> Array </identifier>
    <identifier> a </identifier>
    <symbol> ; </symbol>
   </VarDec>
   <Statements>
    <LetStatement>
     <keyword> let </keyword>
     <identifier> a </identifier>
     <symbol> = </symbol>
     <Expression>
      <Term>
       <identifier> Array </identifier>
       <symbol> . </symbol>
       <identifier> new </identifier>
       <symbol> ( </symbol>
       <ExpressionList>
        <Expression>
         <Term>
          <int_constant> 392 </int_constant>
         </Term>
        </Expression>
        <symbol> , </symbol>
        <Expression>
         <Term>
          <int_constant> 32 </int_constant>
         </Term>
        </Expression>
        <symbol> , </symbol>
        <Expression>
         <Term>
          <int_constant> 29 </int_constant>
         </Term>
        </Expression>
        <symbol> , </symbol>
        <Expression>
         <Term>
          <int_constant> 3 </int_constant>
         </Term>
        </Expression>
        <symbol> , </symbol>
        <Expression>
         <Term>
          <int_constant> 9 </int_constant>
         </Term>
        </Expression>
       </ExpressionList>
       <symbol> ) </symbol>
      </Term>
     </Expression>
     <symbol> ; </symbol>
    </LetStatement>
    <DoStatement>
     <keyword> do </keyword>
     <identifier> a </identifier>
     <symbol> . </symbol>
     <identifier> sort </identifier>
     <symbol> ( </symbol>
     <ExpressionList>
     </ExpressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </DoStatement>
    <DoStatement>
     <keyword> do </keyword>
     <identifier> Output </identifier>
     <symbol> . </symbol>
     <identifier> printf </identifier>
     <symbol> ( </symbol>
     <ExpressionList>
      <Expression>
       <Term>
        <string_constant> "%s is %i elements long." </string_constant>
       </Term>
      </Expression>
      <symbol> , </symbol>
      <Expression>
       <Term>
        <identifier> a </identifier>
        <symbol> . </symbol>
        <identifier> to_s </identifier>
        <symbol> ( </symbol>
        <ExpressionList>
        </ExpressionList>
        <symbol> ) </symbol>
       </Term>
      </Expression>
      <symbol> , </symbol>
      <Expression>
       <Term>
        <identifier> a </identifier>
        <symbol> . </symbol>
        <identifier> length </identifier>
        <symbol> ( </symbol>
        <ExpressionList>
        </ExpressionList>
        <symbol> ) </symbol>
       </Term>
      </Expression>
     </ExpressionList>
     <symbol> ) </symbol>
     <symbol> ; </symbol>
    </DoStatement>
    <ReturnStatement>
     <keyword> return </keyword>
     <Expression>
      <Term>
       <int_constant> 0 </int_constant>
      </Term>
     </Expression>
     <symbol> ; </symbol>
    </ReturnStatement>
   </Statements>
   <symbol> } </symbol>
  </SubroutineBody>
 </SubroutineDec>
</class>
